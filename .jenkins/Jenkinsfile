pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        disableResume()
        timeout(time: 1, unit: 'HOURS')
    }

    environment {
        VERSION = "${sh(script:'date +"%y.%m.%d.%H%M%S"', returnStdout: true).trim()}"
    }

    stages {
        stage('version') {
            steps {
                script {
                    sh 'make version'
                    currentBuild.displayName = "${VERSION}"
                }
            }
        }
        stage('clean') {
            steps {
                script {
                    sh 'make clean'
                }
            }
        }
        stage('compile') {
            steps {
                script {
                    sh 'make compile'
                }
            }
        }
        stage('test') {
            steps {
                script {
                    sh 'make test'
                }
            }
        }
        stage('build native image') {
            steps {
                script {
                    sh 'make app-build-native'
                }
            }
        }
        stage('publish native image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'make app-push-native'
                    }
                }
            }
        }
        stage('deploy to kubernetes') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'k3s-eu-test', variable: 'token')]) {
                        sh "kubectl config use-context eu-test --token ${token}"
                        sh 'kubectl apply -k deployment-kustomize/overlays/EU-TEST'
                    }
                }
            }
        }
    }
}